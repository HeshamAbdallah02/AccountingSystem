name: .NET CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/accounting-api

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: '8.0.x'
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Accounting.Api/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    environment: 
      name: staging
      url: https://accounting-staging.yourdomain.com
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    
    steps:
    - name: Deploy to Staging
      run: |
        echo "?? Deploying to Staging Environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
        echo "Environment: staging"
        # Add your staging deployment commands here
        # Example: kubectl, docker-compose, or cloud provider CLI commands
        
    - name: Run Health Check
      run: |
        echo "?? Running health checks on staging environment"
        # Add health check commands here
        # curl -f https://accounting-staging.yourdomain.com/health || exit 1
        
    - name: Generate deployment summary
      run: |
        echo "## Staging Deployment Summary ??" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** https://accounting-staging.yourdomain.com" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    needs: [build, deploy-staging]
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://accounting.yourdomain.com
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    
    steps:
    - name: Deploy to Production
      run: |
        echo "?? Deploying to Production Environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
        echo "Environment: production"
        # Add your production deployment commands here
        
    - name: Run Health Check
      run: |
        echo "?? Running health checks on production environment"
        # Add health check commands here
        # curl -f https://accounting.yourdomain.com/health || exit 1
        
    - name: Generate deployment summary
      run: |
        echo "## Production Deployment Summary ??" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** production" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **URL:** https://accounting.yourdomain.com" >> $GITHUB_STEP_SUMMARY